{
  
    
        "post0": {
            "title": "Title",
            "content": "!pip uninstall torchtext torch torchvision !pip install -Uqq fastbook import fastbook from fastbook import * from fastai.vision.widgets import * fastbook.setup_book() . import pandas as pd from fastai.callback.fp16 import * . from google.colab import drive drive.mount(&#39;/content/gdrive&#39;) . Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(&#34;/content/gdrive&#34;, force_remount=True). . . . train_path = Path(&#39;/content/gdrive/MyDrive/CropDisease/train&#39;) . fns = get_image_files(train_path) . def get_y(r): return L(parent_label(r)) . def get_dls(bs, size): dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock), get_items=get_image_files, get_y=get_y, item_tfms=RandomResizedCrop(128), batch_tfms=[*aug_transforms(size=size), Normalize()]) return dblock.dataloaders(train_path, bs=bs) . . def accuracy_multi(inp, targ, thresh=0.5, sigmoid=True): &quot;Compute accuracy when `inp` and `targ` are the same size.&quot; if sigmoid: inp = inp.sigmoid() return ((inp&gt;thresh)==targ.bool()).float().mean() . dls = get_dls(128, 128) . learn = cnn_learner(dls, resnet101, metrics=partial(accuracy_multi, thresh=0.2), cbs=MixUp).to_fp16() . Downloading: &#34;https://download.pytorch.org/models/resnet101-5d3b4d8f.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet101-5d3b4d8f.pth . . learn.fit_one_cycle(4, 1e-3) . epoch train_loss valid_loss accuracy_multi time . 0 | 1.025196 | 0.753381 | 0.452381 | 01:41 | . 1 | 0.953289 | 0.799854 | 0.431548 | 01:42 | . 2 | 0.918260 | 0.725472 | 0.511905 | 01:40 | . 3 | 0.887697 | 0.710188 | 0.523810 | 01:40 | . learn.dls = get_dls(64, 224) . learn.fine_tune(5, base_lr=1e-4) . epoch train_loss valid_loss accuracy_multi time . 0 | 0.811156 | 0.557983 | 0.529762 | 01:42 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.813335 | 0.601254 | 0.553571 | 01:43 | . 1 | 0.802236 | 0.621485 | 0.562500 | 01:45 | . 2 | 0.784836 | 0.629872 | 0.571429 | 01:43 | . 3 | 0.784265 | 0.630359 | 0.565476 | 01:43 | . 4 | 0.775524 | 0.613694 | 0.574405 | 01:43 | . learn.loss_func . FlattenedLoss of BCEWithLogitsLoss() . #print(f&quot;Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}&quot;) . Minimum/10: 2.09e-04, steepest point: 9.12e-07 . learn.recorder.plot_loss() . learn.export(&#39;resnet101&#39;) . preds,targs = learn.get_preds() . preds.shape . torch.Size([112, 3]) . accuracy_multi(preds, targs, thresh=0.9, sigmoid=False) . TensorMultiCategory(0.7946) . xs = torch.linspace(0.05,0.95,29) accs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] plt.plot(xs,accs); . def predict(): predictions = [] for f in Path(&#39;/content/gdrive/MyDrive/CropDisease/test&#39;).iterdir(): path = Path(f) _,_,x = learn.predict(path) predictions.append(x) return predictions . preditions = predict() . #for f in Path(&#39;/content/gdrive/MyDrive/CropDisease/test&#39;).iterdir(): #print(f) #path = Path(f) # file_name = os.path.basename(f) #file_name_without_extension = file_name. # file_name_list.append(os.path.splitext(file_name)[0] + &#39;,&#39;) . . sample_submission = pd.read_csv(&#39;/content/gdrive/MyDrive/CropDisease/sample_submission.csv&#39;) data = {&quot;leaf_rust, stem_rust, healthy_wheat&quot;: predictions} index = sample_submission[&#39;ID&#39;] submission = pd.DataFrame(data, index) #submission.index.name = &#39;ID,&#39; . submission . leaf_rust, stem_rust, healthy_wheat . ID . 643083 [tensor(0.6658), tensor(0.6424), tensor(0.6149)] | . 008FWT [tensor(0.4608), tensor(0.5089), tensor(0.2136)] | . 00AQXY [tensor(0.7528), tensor(0.2194), tensor(0.1785)] | . 01OJZX [tensor(0.6781), tensor(0.8745), tensor(0.0761)] | . 07OXKK [tensor(0.4866), tensor(0.1342), tensor(0.6836)] | . ... ... | . ZKF0L9 [tensor(0.7580), tensor(0.4474), tensor(0.6653)] | . ZMAB3R [tensor(0.6706), tensor(0.2289), tensor(0.4928)] | . ZOXDKA [tensor(0.8691), tensor(0.0627), tensor(0.0611)] | . ZSZMOS [tensor(0.3082), tensor(0.9845), tensor(0.7035)] | . ZTWSDG [tensor(0.4935), tensor(0.3980), tensor(0.5008)] | . 610 rows × 1 columns . submission.to_csv(&#39;/content/gdrive/MyDrive/CropDisease_csv_progresive_resizing_resnet101.csv&#39;) .",
            "url": "https://jp97.github.io/SW-AI-Blog/2021/03/22/CropDisease.html",
            "relUrl": "/2021/03/22/CropDisease.html",
            "date": " • Mar 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "ART Classifier refined Dataset",
            "content": "%config IPCompleter.greedy=True import fastbook fastbook.setup_book() from fastbook import * from fastai.vision.widgets import * . import pandas as pd import numpy as np . df = pd.read_csv(&#39;artists.csv&#39;); names = df[&#39;name&#39;] names = names.to_list() names . [&#39;Amedeo Modigliani&#39;, &#39;Vasiliy Kandinskiy&#39;, &#39;Diego Rivera&#39;, &#39;Claude Monet&#39;, &#39;Rene Magritte&#39;, &#39;Salvador Dali&#39;, &#39;Edouard Manet&#39;, &#39;Andrei Rublev&#39;, &#39;Vincent van Gogh&#39;, &#39;Gustav Klimt&#39;, &#39;Hieronymus Bosch&#39;, &#39;Kazimir Malevich&#39;, &#39;Mikhail Vrubel&#39;, &#39;Pablo Picasso&#39;, &#39;Peter Paul Rubens&#39;, &#39;Pierre-Auguste Renoir&#39;, &#39;Francisco Goya&#39;, &#39;Frida Kahlo&#39;, &#39;El Greco&#39;, &#39;Albrecht Dürer&#39;, &#39;Alfred Sisley&#39;, &#39;Pieter Bruegel&#39;, &#39;Marc Chagall&#39;, &#39;Giotto di Bondone&#39;, &#39;Sandro Botticelli&#39;, &#39;Caravaggio&#39;, &#39;Leonardo da Vinci&#39;, &#39;Diego Velazquez&#39;, &#39;Henri Matisse&#39;, &#39;Jan van Eyck&#39;, &#39;Edgar Degas&#39;, &#39;Rembrandt&#39;, &#39;Titian&#39;, &#39;Henri de Toulouse-Lautrec&#39;, &#39;Gustave Courbet&#39;, &#39;Camille Pissarro&#39;, &#39;William Turner&#39;, &#39;Edvard Munch&#39;, &#39;Paul Cezanne&#39;, &#39;Eugene Delacroix&#39;, &#39;Henri Rousseau&#39;, &#39;Georges Seurat&#39;, &#39;Paul Klee&#39;, &#39;Piet Mondrian&#39;, &#39;Joan Miro&#39;, &#39;Andy Warhol&#39;, &#39;Paul Gauguin&#39;, &#39;Raphael&#39;, &#39;Michelangelo&#39;, &#39;Jackson Pollock&#39;] . df . id name years genre nationality bio wikipedia paintings . 0 0 | Amedeo Modigliani | 1884 - 1920 | Expressionism | Italian | Amedeo Clemente Modigliani (Italian pronunciation: [ameˈdɛːo modiʎˈʎaːni]; 12 July 1884 – 24 January 1920) was an Italian Jewish painter and sculptor who worked mainly in France. He is known for portraits and nudes in a modern style characterized by elongation of faces, necks, and figures that were not received well during his lifetime but later found acceptance. Modigliani spent his youth in Italy, where he studied the art of antiquity and the Renaissance. In 1906 he moved to Paris, where he came into contact with such artists as Pablo Picasso and Constantin Brâncuși. By 1912 Modigliani w... | http://en.wikipedia.org/wiki/Amedeo_Modigliani | 193 | . 1 1 | Vasiliy Kandinskiy | 1866 - 1944 | Expressionism,Abstractionism | Russian | Wassily Wassilyevich Kandinsky (Russian: Васи́лий Васи́льевич Канди́нский, tr. Vasíliy Vasílʹevich Kandínskiy) (16 December [O.S. 4 December] 1866 – 13 December 1944) was a Russian painter and art theorist. | http://en.wikipedia.org/wiki/Wassily_Kandinsky | 88 | . 2 2 | Diego Rivera | 1886 - 1957 | Social Realism,Muralism | Mexican | Diego María de la Concepción Juan Nepomuceno Estanislao de la Rivera y Barrientos Acosta y Rodríguez, known as Diego Rivera (Spanish pronunciation: [ˈdjeɣo riˈβeɾa]; December 8, 1886 – November 24, 1957) was a prominent Mexican painter. His large frescoes helped establish the Mexican mural movement in Mexican art. Between 1922 and 1953, Rivera painted murals in, among other places, Mexico City, Chapingo, Cuernavaca, San Francisco, Detroit, and New York City. In 1931, a retrospective exhibition of his works was held at the Museum of Modern Art in New York. Rivera had a volatile marriage wit... | http://en.wikipedia.org/wiki/Diego_Rivera | 70 | . 3 3 | Claude Monet | 1840 - 1926 | Impressionism | French | Oscar-Claude Monet (; French: [klod mɔnɛ]; 14 November 1840 – 5 December 1926) was a French painter, a founder of French Impressionist painting and the most consistent and prolific practitioner of the movement&#39;s philosophy of expressing one&#39;s perceptions before nature, especially as applied to plein air landscape painting. The term &quot;Impressionism&quot; is derived from the title of his painting Impression, soleil levant (Impression, Sunrise), which was exhibited in 1874 in the first of the independent exhibitions mounted by Monet and his associates as an alternative to the Salon de Paris.Monet&#39;s... | http://en.wikipedia.org/wiki/Claude_Monet | 73 | . 4 4 | Rene Magritte | 1898 - 1967 | Surrealism,Impressionism | Belgian | René François Ghislain Magritte (French: [ʁəne fʁɑ̃swa ɡilɛ̃ maɡʁit]; 21 November 1898 – 15 August 1967) was a Belgian Surrealist artist. He became well known for creating a number of witty and thought-provoking images. Often depicting ordinary objects in an unusual context, his work is known for challenging observers&#39; preconditioned perceptions of reality. His imagery has influenced Pop art, minimalist and conceptual art. | http://en.wikipedia.org/wiki/René_Magritte | 194 | . 5 5 | Salvador Dali | 1904 - 1989 | Surrealism | Spanish | Salvador Domingo Felipe Jacinto Dalí i Domènech, 1st Marquis of Dalí de Púbol (11 May 1904 – 23 January 1989), known professionally as Salvador Dalí (; Catalan: [səlβəˈðo ðəˈli]; Spanish: [salβaˈðoɾ ðaˈli]), was a prominent Spanish surrealist born in Figueres, Catalonia, Spain. | http://en.wikipedia.org/wiki/Salvador_Dalí | 139 | . 6 6 | Edouard Manet | 1832 - 1883 | Realism,Impressionism | French | Édouard Manet (US: ; UK: ; French: [edwaʁ manɛ]; 23 January 1832 – 30 April 1883) was a French modernist painter. He was one of the first 19th-century artists to paint modern life, and a pivotal figure in the transition from Realism to Impressionism. | http://en.wikipedia.org/wiki/Édouard_Manet | 90 | . 7 7 | Andrei Rublev | 1360 - 1430 | Byzantine Art | Russian | Andrei Rublev (Russian: Андре́й Рублёв, IPA: [ɐnˈdrʲej rʊˈblʲɵf], also transliterated as Andrey Rublyov; born in the 1360s, died 29 January 1427 or 1430, or 17 October 1428 in Moscow) is considered to be one of the greatest medieval Russian painters of Orthodox icons and frescos. | http://en.wikipedia.org/wiki/Andrei_Rublev | 99 | . 8 8 | Vincent van Gogh | 1853 – 1890 | Post-Impressionism | Dutch | Vincent Willem van Gogh (Dutch: [ˈvɪnsɛnt ˈʋɪləm vɑŋ ˈɣɔx] (listen); 30 March 1853 – 29 July 1890) was a Dutch Post-Impressionist painter who is among the most famous and influential figures in the history of Western art. In just over a decade he created about 2,100 artworks, including around 860 oil paintings, most of them in the last two years of his life. They include landscapes, still lifes, portraits and self-portraits, and are characterised by bold colours and dramatic, impulsive and expressive brushwork that contributed to the foundations of modern art. However, he was not commercia... | http://en.wikipedia.org/wiki/Vincent_van_Gogh | 877 | . 9 9 | Gustav Klimt | 1862 - 1918 | Symbolism,Art Nouveau | Austrian | Gustav Klimt (July 14, 1862 – February 6, 1918) was an Austrian symbolist painter and one of the most prominent members of the Vienna Secession movement. Klimt is noted for his paintings, murals, sketches, and other objets d&#39;art. Klimt&#39;s primary subject was the female body, and his works are marked by a frank eroticism. In addition to his figurative works, which include allegories and portraits, he painted landscapes. Among the artists of the Vienna Secession, Klimt was the most influenced by Japanese art and its methods. | http://en.wikipedia.org/wiki/Gustav_Klimt | 117 | . 10 10 | Hieronymus Bosch | 1450 - 1516 | Northern Renaissance | Dutch | Hieronymus Bosch ( (listen); Dutch: [ɦijeːˈroːnimʏz ˈbɔs] (listen); born Jheronimus van Aken [jeːˈroːnimʏs fɑn ˈaːkə(n)]; c. 1450 – 9 August 1516) was a Dutch/Netherlandish draughtsman and painter from Brabant. He is one of the most notable representatives of the Early Netherlandish painting school. His work contains fantastic illustrations of religious concepts and narratives. Within his lifetime his work was collected in the Netherlands, Austria, and Spain, and widely copied, especially his macabre and nightmarish depictions of hell. | http://en.wikipedia.org/wiki/Hieronymus_Bosch | 137 | . 11 11 | Kazimir Malevich | 1879 - 1935 | Suprematism | Russian | Kazimir Severinovich Malevich (February 23 [O.S. 11] 1879 – May 15, 1935) was a Russian avant-garde artist and art theorist, whose pioneering work and writing had a profound influence on the development of non-objective, or abstract art, in the 20th century. Born in Kiev to an ethnic Polish family, his concept of Suprematism sought to develop a form of expression that moved as far as possible from the world of natural forms (objectivity) and subject matter in order to access &quot;the supremacy of pure feeling&quot; and spirituality.Early on, Malevich worked in a variety of styles, quickly assimilat... | http://en.wikipedia.org/wiki/Kazimir_Malevich | 126 | . 12 12 | Mikhail Vrubel | 1856 - 1910 | Symbolism | Russian | Mikhail Aleksandrovich Vrubel (Russian: Михаи́л Алекса́ндрович Вру́бель; March 17, 1856 – April 14, 1910, all n.s.) is usually regarded amongst the Russian painters of the Symbolist movement and of Art Nouveau. In reality, he deliberately stood aloof from contemporary art trends, so that the origin of his unusual manner should be sought in Late Byzantine and Early Renaissance painting. | http://en.wikipedia.org/wiki/Mikhail_Vrubel | 171 | . 13 13 | Pablo Picasso | 1881 - 1973 | Cubism | Spanish | Pablo Ruiz Picasso (; Spanish: [ˈpaβlo piˈkaso]; 25 October 1881 – 8 April 1973) was a Spanish painter, sculptor, printmaker, ceramicist, stage designer, poet and playwright who spent most of his adult life in France. Regarded as one of the most influential artists of the 20th century, he is known for co-founding the Cubist movement, the invention of constructed sculpture, the co-invention of collage, and for the wide variety of styles that he helped develop and explore. Among his most famous works are the proto-Cubist Les Demoiselles d&#39;Avignon (1907), and Guernica (1937), a dramatic portr... | http://en.wikipedia.org/wiki/Pablo_Picasso | 439 | . 14 14 | Peter Paul Rubens | 1577 - 1640 | Baroque | Flemish | Sir Peter Paul Rubens (; Dutch: [ˈrybə(n)s]; 28 June 1577 – 30 May 1640) was a Flemish artist. He is considered the most influential artist of Flemish Baroque tradition. Rubens&#39;s highly charged compositions reference erudite aspects of classical and Christian history. His unique and immensely popular Baroque style emphasized movement, color, and sensuality, which followed the immediate, dramatic artistic style promoted in the Counter-Reformation. Rubens specialized in making altarpieces, portraits, landscapes, and history paintings of mythological and allegorical subjects. | http://en.wikipedia.org/wiki/Peter_Paul_Rubens | 141 | . 15 15 | Pierre-Auguste Renoir | 1841 - 1919 | Impressionism | French | Pierre-Auguste Renoir, commonly known as Auguste Renoir (; French: [pjɛʁ oɡyst ʁənwaʁ]; 25 February 1841 – 3 December 1919), was a French artist who was a leading painter in the development of the Impressionist style. As a celebrator of beauty and especially feminine sensuality, it has been said that &quot;Renoir is the final representative of a tradition which runs directly from Rubens to Watteau.&quot; | http://en.wikipedia.org/wiki/Pierre-Auguste_Renoir | 336 | . 16 16 | Francisco Goya | 1746 - 1828 | Romanticism | Spanish | Francisco José de Goya y Lucientes (; Spanish: [fɾanˈθisko xoˈse ðe ˈɣoʝa i luˈθjentes]; 30 March 1746 – 16 April 1828) was a Spanish romantic painter and printmaker. He is considered the most important Spanish artist of the late 18th and early 19th centuries and throughout his long career was a commentator and chronicler of his era. Immensely successful in his lifetime, Goya is often referred to as both the last of the Old Masters and the first of the moderns. He was also one of the great contemporary portraitists.He was born to a modest family in 1746 in the village of Fuendetodos in Ar... | http://en.wikipedia.org/wiki/Francisco_Goya | 291 | . 17 17 | Frida Kahlo | 1907 - 1954 | Primitivism,Surrealism | Mexican | Frida Kahlo de Rivera (Spanish pronunciation: [ˈfɾiða ˈkalo]; born Magdalena Carmen Frida Kahlo y Calderón; 6 July 1907 – 13 July 1954) was a Mexican artist who painted many portraits, self-portraits and works inspired by the nature and artifacts of Mexico. Inspired by the country&#39;s popular culture, she employed a naïve folk art style to explore questions of identity, postcolonialism, gender, class and race in Mexican society. Her paintings often had strong autobiographical elements and mixed realism with fantasy. In addition to belonging to the post-revolutionary Mexicayotl movement, whic... | http://en.wikipedia.org/wiki/Frida_Kahlo | 120 | . 18 18 | El Greco | 1541 - 1614 | Mannerism | Spanish,Greek | Doménikos Theotokópoulos (Greek: Δομήνικος Θεοτοκόπουλος [ðoˈminikos θeotoˈkopulos]; October 1541 – 7 April 1614), most widely known as El Greco (&quot;The Greek&quot;), was a painter, sculptor and architect of the Spanish Renaissance. &quot;El Greco&quot; was a nickname, a reference to his Greek origin, and the artist normally signed his paintings with his full birth name in Greek letters, Δομήνικος Θεοτοκόπουλος, Doménikos Theotokópoulos, often adding the word Κρής Krēs, Cretan. | http://en.wikipedia.org/wiki/El_Greco | 87 | . 19 19 | Albrecht Dürer | 1471 - 1528 | Northern Renaissance | German | Albrecht Dürer (; German: [ˈʔalbʁɛçt ˈdyːʁɐ]; 21 May 1471 – 6 April 1528) sometimes spelt in English as Durer or Duerer, without umlaut, was a painter, printmaker, and theorist of the German Renaissance. Born in Nuremberg, Dürer established his reputation and influence across Europe when he was still in his twenties due to his high-quality woodcut prints. | http://en.wikipedia.org/wiki/Albrecht_Dürer | 328 | . 20 20 | Alfred Sisley | 1839 - 1899 | Impressionism | French,British | Alfred Sisley (; French: [sislɛ]; 30 October 1839 – 29 January 1899) was an Impressionist landscape painter who was born and spent most of his life in France, but retained British citizenship. He was the most consistent of the Impressionists in his dedication to painting landscape en plein air (i.e., outdoors). He deviated into figure painting only rarely and, unlike Renoir and Pissarro, found that Impressionism fulfilled his artistic needs. | http://en.wikipedia.org/wiki/Alfred_Sisley | 259 | . 21 21 | Pieter Bruegel | 1525 - 1569 | Northern Renaissance | Flemish | Pieter Bruegel (also Brueghel) the Elder (Dutch: [ˈpitər ˈbrøːɣəɫ]; c. 1525-1530 – 9 September 1569) was the most significant artist of Dutch and Flemish Renaissance painting, a painter and printmaker from Brabant, known for his landscapes and peasant scenes (so called genre painting); he was a pioneer in making both types of subject the focus in large paintings. | http://en.wikipedia.org/wiki/Pieter_Bruegel_the_Elder | 134 | . 22 22 | Marc Chagall | 1887 - 1985 | Primitivism | French,Jewish,Belarusian | Marc Zakharovich Chagall ( shə-GAHL; born Moishe Zakharovich Shagal; 6 July [O.S. 24 June] 1887 – 28 March 1985) was a Russian-French artist of Belarusian Jewish origin. An early modernist, he was associated with several major artistic styles and created works in virtually every artistic format, including painting, book illustrations, stained glass, stage sets, ceramic, tapestries and fine art prints. | http://en.wikipedia.org/wiki/Marc_Chagall | 239 | . 23 23 | Giotto di Bondone | 1266 - 1337 | Proto Renaissance | Italian | Giotto di Bondone (Italian pronunciation: [ˈdʒɔtto di bonˈdoːne]; c. 1267 – January 8, 1337), known mononymously as Giotto (English: ) and Latinised as Giottus, was an Italian painter and architect from Florence during the Late Middle Ages. He worked during the Gothic/Proto-Renaissance period.Giotto&#39;s contemporary, the banker and chronicler Giovanni Villani, wrote that Giotto was &quot;the most sovereign master of painting in his time, who drew all his figures and their postures according to nature&quot; and of his publicly recognized &quot;talent and excellence&quot;.In his Lives of the Most Excellent Painte... | http://en.wikipedia.org/wiki/Giotto_di_Bondone | 119 | . 24 24 | Sandro Botticelli | 1445 - 1510 | Early Renaissance | Italian | Alessandro (c. 1445 – May 17, 1510), known as Sandro Botticelli (Italian: [ˈsandro bottiˈtʃɛlli]), was an Italian painter of the Early Renaissance. He belonged to the Florentine School under the patronage of Lorenzo de&#39; Medici, a movement that Giorgio Vasari would characterize less than a hundred years later in his Vita of Botticelli as a &quot;golden age&quot;. Botticelli&#39;s posthumous reputation suffered until the late 19th century; since then, his work has been seen to represent the linear grace of Early Renaissance painting. | http://en.wikipedia.org/wiki/Sandro_Botticelli | 164 | . 25 25 | Caravaggio | 1571 - 1610 | Baroque | Italian | Michelangelo Merisi (Michele Angelo Merigi or Amerighi) da Caravaggio (, US: , Italian pronunciation: [mikeˈlandʒelo meˈriːzi da (k)karaˈvaddʒo]; 28 September 1571 – 18 July 1610) was an Italian painter active in Rome, Naples, Malta, and Sicily from the early 1590s to 1610. His paintings combine a realistic observation of the human state, both physical and emotional, with a dramatic use of lighting, which had a formative influence on Baroque painting.Caravaggio employed close physical observation with a dramatic use of chiaroscuro that came to be known as tenebrism. He made the technique a... | http://en.wikipedia.org/wiki/Caravaggio | 55 | . 26 26 | Leonardo da Vinci | 1452 - 1519 | High Renaissance | Italian | Leonardo di ser Piero da Vinci (Italian: [leoˈnardo di ˌsɛr ˈpjɛːro da (v)ˈvintʃi] (listen); 15 April 1452 – 2 May 1519), more commonly Leonardo da Vinci or simply Leonardo, was an Italian polymath of the Renaissance whose areas of interest included invention, drawing, painting, sculpting, architecture, science, music, mathematics, engineering, literature, anatomy, geology, astronomy, botany, writing, history, and cartography. He has been variously called the father of palaeontology, ichnology, and architecture, and he is widely considered one of the greatest painters of all time. Sometime... | http://en.wikipedia.org/wiki/Leonardo_da_Vinci | 143 | . 27 27 | Diego Velazquez | 1599 - 1660 | Baroque | Spanish | Diego Rodríguez de Silva y Velázquez (Spanish: [ˈdjeɣo βeˈlaθkeθ]; baptized June 6, 1599 – August 6, 1660) was a Spanish painter, the leading artist in the court of King Philip IV, and one of the most important painters of the Spanish Golden Age. He was an individualistic artist of the contemporary Baroque period. In addition to numerous renditions of scenes of historical and cultural significance, he painted scores of portraits of the Spanish royal family, other notable European figures, and commoners, culminating in the production of his masterpiece Las Meninas (1656). | http://en.wikipedia.org/wiki/Diego_Velázquez | 128 | . 28 28 | Henri Matisse | 1869 - 1954 | Impressionism,Post-Impressionism | French | Henri Émile Benoît Matisse (French: [ɑ̃ʁi emil bənwɑ matis]; 31 December 1869 – 3 November 1954) was a French artist, known for both his use of colour and his fluid and original draughtsmanship. He was a draughtsman, printmaker, and sculptor, but is known primarily as a painter. | http://en.wikipedia.org/wiki/Henri_Matisse | 186 | . 29 29 | Jan van Eyck | 1395 - 1441 | Northern Renaissance | Flemish | Jan van Eyck (Dutch: [ˈjɑn vɑn ˈɛik]) (before c. 1390 – 9 July 1441) was an Early Netherlandish painter active in Bruges. He is one of the founders of Early Netherlandish painting and one of the most significant representatives of Early Northern Renaissance art. The few surviving records of his early life indicate that he was born around 1380–1390, most likely in Maaseik. He took employment in the Hague around 1422, when he was already a master painter with workshop assistants, and employed as painter and valet de chambre with John III the Pitiless, ruler of Holland and Hainaut. He was th... | http://en.wikipedia.org/wiki/Jan_van_Eyck | 81 | . 30 30 | Edgar Degas | 1834 - 1917 | Impressionism | French | Edgar Degas (US: or UK: ; born Hilaire-Germain-Edgar De Gas, French: [ilɛːʁ ʒɛʁmɛ̃ ɛdɡaʁ də ɡɑ]; 19 July 1834 – 27 September 1917) was a French artist famous for his paintings, sculptures, prints, and drawings. He is especially identified with the subject of dance; more than half of his works depict dancers. Regarded as one of the founders of Impressionism, he rejected the term, preferring to be called a realist. He was a superb draftsman, and particularly masterly in depicting movement, as can be seen in his rendition of dancers, racecourse subjects and female nudes. His portraits are no... | http://en.wikipedia.org/wiki/Edgar_Degas | 702 | . 31 31 | Rembrandt | 1606 - 1669 | Baroque | Dutch | Rembrandt Harmenszoon van Rijn (; Dutch: [ˈrɛmbrɑnt ˈɦɑrmə(n)soːn vɑn ˈrɛin] (listen); July 15, 1606 – October 4, 1669) was a Dutch draughtsman, painter and printmaker. An innovative and prolific master in three media, he is generally considered one of the greatest visual artists in the history of art and the most important in Dutch art history. Unlike most Dutch masters of the 17th century, Rembrandt&#39;s works depict a wide range of style and subject matter, from portraits and self-portraits to landscapes, genre scenes, allegorical and historical scenes, biblical and mythological themes as ... | http://en.wikipedia.org/wiki/Rembrandt | 262 | . 32 32 | Titian | 1488 - 1576 | High Renaissance,Mannerism | Italian | Tiziano Vecelli or Tiziano Vecellio (pronounced [titˈtsjaːno veˈtʃɛlljo]; c. 1488/1490 – 27 August 1576), known in English as Titian , was an Italian painter, the most important member of the 16th-century Venetian school. He was born in Pieve di Cadore, near Belluno, then in the Republic of Venice). During his lifetime he was often called da Cadore, taken from the place of his birth. | http://en.wikipedia.org/wiki/Titian | 255 | . 33 33 | Henri de Toulouse-Lautrec | 1864 – 1901 | Post-Impressionism | French | Henri Marie Raymond de Toulouse-Lautrec-Monfa (24 November 1864 – 9 September 1901), also known as Henri de Toulouse-Lautrec (French: [ɑ̃ʁi də tuluz lotʁɛk]), was a French painter, printmaker, draughtsman, caricaturist, and illustrator whose immersion in the colourful and theatrical life of Paris in the late 19th century allowed him to produce a collection of enticing, elegant, and provocative images of the modern, sometimes decadent, affairs of those times. | https://en.wikipedia.org/wiki/Henri_de_Toulouse-Lautrec | 81 | . 34 34 | Gustave Courbet | 1819 - 1877 | Realism | French | Jean Désiré Gustave Courbet (French: [ɡystav kuʁbɛ]; 10 June 1819 – 31 December 1877) was a French painter who led the Realism movement in 19th-century French painting. Committed to painting only what he could see, he rejected academic convention and the Romanticism of the previous generation of visual artists. His independence set an example that was important to later artists, such as the Impressionists and the Cubists. Courbet occupies an important place in 19th-century French painting as an innovator and as an artist willing to make bold social statements through his work. | https://en.wikipedia.org/wiki/Gustave_Courbet | 59 | . 35 35 | Camille Pissarro | 1830 - 1903 | Impressionism,Post-Impressionism | French | Camille Pissarro (French: [kamij pisaʁo]; 10 July 1830 – 13 November 1903) was a Danish-French Impressionist and Neo-Impressionist painter born on the island of St Thomas (now in the US Virgin Islands, but then in the Danish West Indies). His importance resides in his contributions to both Impressionism and Post-Impressionism. Pissarro studied from great forerunners, including Gustave Courbet and Jean-Baptiste-Camille Corot. He later studied and worked alongside Georges Seurat and Paul Signac when he took on the Neo-Impressionist style at the age of 54. | https://en.wikipedia.org/wiki/Camille_Pissarro | 91 | . 36 36 | William Turner | 1775 - 1851 | Romanticism | British | Joseph Mallord William Turner (23 April 1775 – 19 December 1851), known as J. M. W. Turner and contemporarily as William Turner, was an English Romantic painter, printmaker and watercolourist. He is known for his expressive colourisations, imaginative landscapes and turbulent, often violent marine paintings. | https://en.wikipedia.org/wiki/J._M._W._Turner | 66 | . 37 37 | Edvard Munch | 1863 - 1944 | Symbolism,Expressionism | Norwegian | Edvard Munch (; Norwegian: [ˈɛdvɑʈ ˈmʊŋk] (listen); 12 December 1863 – 23 January 1944) was a Norwegian painter, whose best known work, The Scream, has become one of the most iconic images of world art. | https://en.wikipedia.org/wiki/Edvard_Munch | 67 | . 38 38 | Paul Cezanne | 1839 – 1906 | Post-Impressionism | French | Paul Cézanne (US: or UK: ; French: [pɔl sezan]; 19 January 1839 – 22 October 1906) was a French artist and Post-Impressionist painter whose work laid the foundations of the transition from the 19th-century conception of artistic endeavor to a new and radically different world of art in the 20th century. Cézanne&#39;s often repetitive, exploratory brushstrokes are highly characteristic and clearly recognizable. He used planes of colour and small brushstrokes that build up to form complex fields. The paintings convey Cézanne&#39;s intense study of his subjects. | https://en.wikipedia.org/wiki/Paul_Cézanne | 47 | . 39 39 | Eugene Delacroix | 1798 – 1863 | Romanticism | French | Ferdinand Victor Eugène Delacroix (; French: [ø.ʒɛn də.la.kʁwa]; 26 April 1798 – 13 August 1863) was a French Romantic artist regarded from the outset of his career as the leader of the French Romantic school.As a painter and muralist, Delacroix&#39;s use of expressive brushstrokes and his study of the optical effects of colour profoundly shaped the work of the Impressionists, while his passion for the exotic inspired the artists of the Symbolist movement. A fine lithographer, Delacroix illustrated various works of William Shakespeare, the Scottish author Walter Scott and the German author Joh... | https://en.wikipedia.org/wiki/Eugène_Delacroix | 31 | . 40 40 | Henri Rousseau | 1844 – 1910 | Primitivism | French | Henri Julien Félix Rousseau (French: [ɑ̃ʁi ʒyljɛ̃ feliks ʁuso]; May 21, 1844 – September 2, 1910) was a French post-impressionist painter in the Naïve or Primitive manner. He was also known as Le Douanier (the customs officer), a humorous description of his occupation as a toll and tax collector. He started painting seriously in his early forties; by age 49, he retired from his job to work on his art full-time.Ridiculed during his lifetime by critics, he came to be recognized as a self-taught genius whose works are of high artistic quality. Rousseau&#39;s work exerted an extensive influence o... | https://en.wikipedia.org/wiki/Henri_Rousseau | 70 | . 41 41 | Georges Seurat | 1859 – 1891 | Post-Impressionism | French | Georges-Pierre Seurat (French: [ʒɔʁʒ pjɛʁ sœʁa]; 2 December 1859 – 29 March 1891) was a French post-Impressionist artist. He is best known for devising the painting techniques known as chromoluminarism and pointillism. While less famous than his paintings, his conté crayon drawings have also garnered a great deal of critical appreciation. Seurat&#39;s artistic personality was compounded of qualities which are usually supposed to be opposed and incompatible: on the one hand, his extreme and delicate sensibility; on the other, a passion for logical abstraction and an almost mathematical precisi... | https://en.wikipedia.org/wiki/Georges_Seurat | 43 | . 42 42 | Paul Klee | 1879 – 1940 | Expressionism,Abstractionism,Surrealism | German,Swiss | Paul Klee (German: [paʊ̯l ˈkleː]; 18 December 1879 – 29 June 1940) was a Swiss German artist. His highly individual style was influenced by movements in art that included Expressionism, Cubism, and Surrealism. Klee was a natural draftsman who experimented with and eventually deeply explored color theory, writing about it extensively; his lectures Writings on Form and Design Theory (Schriften zur Form und Gestaltungslehre), published in English as the Paul Klee Notebooks, are held to be as important for modern art as Leonardo da Vinci&#39;s A Treatise on Painting for the Renaissance. He and hi... | https://en.wikipedia.org/wiki/Paul_Klee | 188 | . 43 43 | Piet Mondrian | 1872 – 1944 | Neoplasticism | Dutch | Pieter Cornelis Mondriaan, after 1906 Piet Mondrian (; Dutch: [ˈpit ˈmɔndrijaːn], later [ˈmɔndrijɑn]; 7 March 1872 – 1 February 1944), was a Dutch painter and theoretician who is regarded as one of the greatest artists of the 20th century. He is known for being one of the pioneers of 20th century abstract art, as he changed his artistic direction from figurative painting to an increasingly abstract style, until he reached a point where his artistic vocabulary was reduced to simple geometric elements.Mondrian&#39;s art was highly utopian and was concerned with a search for universal values and ... | https://en.wikipedia.org/wiki/Piet_Mondrian | 84 | . 44 44 | Joan Miro | 1893 – 1983 | Surrealism | Spanish | Joan Miró i Ferrà (; Catalan: [ʒuˈam miˈɾo j fəˈra]; 20 April 1893 – 25 December 1983) was a Spanish painter, sculptor, and ceramicist born in Barcelona. A museum dedicated to his work, the Fundació Joan Miró, was established in his native city of Barcelona in 1975, and another, the Fundació Pilar i Joan Miró, was established in his adoptive city of Palma de Mallorca in 1981. | https://en.wikipedia.org/wiki/Joan_Miró | 102 | . 45 45 | Andy Warhol | 1928 – 1987 | Pop Art | American | Andy Warhol (; born Andrew Warhola; August 6, 1928 – February 22, 1987) was an American artist, director and producer who was a leading figure in the visual art movement known as pop art. His works explore the relationship between artistic expression, celebrity culture, and advertising that flourished by the 1960s, and span a variety of media, including painting, silkscreening, photography, film, and sculpture. Some of his best known works include the silkscreen paintings Campbell&#39;s Soup Cans (1962) and Marilyn Diptych (1962), the experimental film Chelsea Girls (1966), and the multimedia ... | https://en.wikipedia.org/wiki/Andy_Warhol | 181 | . 46 46 | Paul Gauguin | 1848 – 1903 | Symbolism,Post-Impressionism | French | Eugène Henri Paul Gauguin (UK: , US: ; French: [øʒɛn ɑ̃ʁi pɔl ɡoɡɛ̃]; 7 June 1848 – 8 May 1903) was a French post-Impressionist artist. Unappreciated until after his death, Gauguin is now recognized for his experimental use of color and Synthetist style that were distinctly different from Impressionism. Toward the end of his life, he spent ten years in French Polynesia, and most of his paintings from this time depict people or landscapes from that region. | http://en.wikipedia.org/wiki/Paul_Gauguin | 311 | . 47 47 | Raphael | 1483 – 1520 | High Renaissance | Italian | Raffaello Sanzio da Urbino (Italian: [raffaˈɛllo ˈsantsjo da urˈbiːno]; March 28 or April 6, 1483 – April 6, 1520), known as Raphael (, US: ), was an Italian painter and architect of the High Renaissance. His work is admired for its clarity of form, ease of composition, and visual achievement of the Neoplatonic ideal of human grandeur. Together with Michelangelo and Leonardo da Vinci, he forms the traditional trinity of great masters of that period.Raphael was enormously productive, running an unusually large workshop and, despite his death at 37, leaving a large body of work. Many of his ... | https://en.wikipedia.org/wiki/Raphael | 109 | . 48 48 | Michelangelo | 1475 – 1564 | High Renaissance | Italian | Michelangelo di Lodovico Buonarroti Simoni or more commonly known by his first name Michelangelo (; Italian: [mikeˈlandʒelo di lodoˈviːko ˌbwɔnarˈrɔːti siˈmoːni]; 6 March 1475 – 18 February 1564) was an Italian sculptor, painter, architect and poet of the High Renaissance born in the Republic of Florence, who exerted an unparalleled influence on the development of Western art. Considered by many the greatest artist of his lifetime, and by some the greatest artist of all time, his artistic versatility was of such a high order that he is often considered a contender for the title of the arch... | https://en.wikipedia.org/wiki/Michelangelo | 49 | . 49 49 | Jackson Pollock | 1912 – 1956 | Abstract Expressionism | American | Paul Jackson Pollock (; January 28, 1912 – August 11, 1956) was an American painter and a major figure in the abstract expressionist movement. | http://en.wikipedia.org/wiki/Jackson_Pollock | 24 | . conf_id = &quot;efb1b149-c219-4091-be6d-14a279c405c4&quot; key_id = &quot;1be3ada0f2a649d087e9fb39798485a0&quot; #Define method to search bing for images def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] for img in search_results[&quot;value&quot;][:150]]) . image_types = names path = Path(&#39;art&#39;) if not path.exists(): path.mkdir() for o in image_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing_new(key_id, o, conf_id) download_images(dest, urls=results) . fns = get_image_files(path) failed = verify_images(fns) failed.map(Path.unlink) . (#0) [] . artist = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5) ) . dls = artist.dataloaders(path) dls.valid.show_batch(max_n=8, nrows=2) . model = cnn_learner(dls, resnet50, metrics=error_rate) model.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet50-19c8e357.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth . . epoch train_loss valid_loss error_rate time . 0 | 2.904068 | 1.627977 | 0.423672 | 02:22 | . epoch train_loss valid_loss error_rate time . 0 | 1.545054 | 1.151923 | 0.298588 | 03:03 | . 1 | 1.125317 | 0.971306 | 0.252858 | 03:03 | . 2 | 0.636391 | 0.803188 | 0.193679 | 03:04 | . 3 | 0.359279 | 0.772945 | 0.181574 | 03:04 | . interpreter = ClassificationInterpretation.from_learner(model) interpreter.plot_confusion_matrix() . interpreter.plot_top_losses(1, nrows=3) . cleaner = ImageClassifierCleaner(model) cleaner . for idx in cleaner.delete(): cleaner.fns[idx].unlink() # for moce to different category # for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . pred,pred_idx,probs = model.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . Label(value=&#39;Prediction: Jan van Eyck; Probability: 0.7262&#39;) .",
            "url": "https://jp97.github.io/SW-AI-Blog/jupyter/2021/02/23/Art-Classification-refined.html",
            "relUrl": "/jupyter/2021/02/23/Art-Classification-refined.html",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "ART Classifier",
            "content": "%config IPCompleter.greedy=True import fastbook fastbook.setup_book() from fastbook import * from fastai.vision.widgets import * . import pandas as pd import numpy as np . df = pd.read_csv(&#39;artists.csv&#39;); names = df[&#39;name&#39;] names = names.to_list() names . [&#39;Amedeo Modigliani&#39;, &#39;Vasiliy Kandinskiy&#39;, &#39;Diego Rivera&#39;, &#39;Claude Monet&#39;, &#39;Rene Magritte&#39;, &#39;Salvador Dali&#39;, &#39;Edouard Manet&#39;, &#39;Andrei Rublev&#39;, &#39;Vincent van Gogh&#39;, &#39;Gustav Klimt&#39;, &#39;Hieronymus Bosch&#39;, &#39;Kazimir Malevich&#39;, &#39;Mikhail Vrubel&#39;, &#39;Pablo Picasso&#39;, &#39;Peter Paul Rubens&#39;, &#39;Pierre-Auguste Renoir&#39;, &#39;Francisco Goya&#39;, &#39;Frida Kahlo&#39;, &#39;El Greco&#39;, &#39;Albrecht Dürer&#39;, &#39;Alfred Sisley&#39;, &#39;Pieter Bruegel&#39;, &#39;Marc Chagall&#39;, &#39;Giotto di Bondone&#39;, &#39;Sandro Botticelli&#39;, &#39;Caravaggio&#39;, &#39;Leonardo da Vinci&#39;, &#39;Diego Velazquez&#39;, &#39;Henri Matisse&#39;, &#39;Jan van Eyck&#39;, &#39;Edgar Degas&#39;, &#39;Rembrandt&#39;, &#39;Titian&#39;, &#39;Henri de Toulouse-Lautrec&#39;, &#39;Gustave Courbet&#39;, &#39;Camille Pissarro&#39;, &#39;William Turner&#39;, &#39;Edvard Munch&#39;, &#39;Paul Cezanne&#39;, &#39;Eugene Delacroix&#39;, &#39;Henri Rousseau&#39;, &#39;Georges Seurat&#39;, &#39;Paul Klee&#39;, &#39;Piet Mondrian&#39;, &#39;Joan Miro&#39;, &#39;Andy Warhol&#39;, &#39;Paul Gauguin&#39;, &#39;Raphael&#39;, &#39;Michelangelo&#39;, &#39;Jackson Pollock&#39;] . conf_id = &quot;efb1b149-c219-4091-be6d-14a279c405c4&quot; key_id = &quot;1be3ada0f2a649d087e9fb39798485a0&quot; #Define method to search bing for images def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] for img in search_results[&quot;value&quot;][:150]]) . image_types = names path = Path(&#39;art&#39;) if not path.exists(): path.mkdir() for o in image_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing_new(key_id, o, conf_id) download_images(dest, urls=results) . fns = get_image_files(path) failed = verify_images(fns) failed.map(Path.unlink) . (#0) [] . artist = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5) ) . dls = artist.dataloaders(path) dls.valid.show_batch(max_n=8, nrows=2) . model = cnn_learner(dls, resnet18, metrics=error_rate) model.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 3.640395 | 1.958444 | 0.511409 | 00:57 | . epoch train_loss valid_loss error_rate time . 0 | 2.094822 | 1.472021 | 0.395302 | 01:14 | . 1 | 1.512678 | 1.203370 | 0.321477 | 01:14 | . 2 | 1.041037 | 1.054622 | 0.285235 | 01:14 | . 3 | 0.746764 | 1.025786 | 0.268456 | 01:14 | . interpreter = ClassificationInterpretation.from_learner(model) interpreter.plot_confusion_matrix() . interpreter.plot_top_losses(1, nrows=3) . cleaner = ImageClassifierCleaner(model) cleaner . FileNotFoundError Traceback (most recent call last) &lt;ipython-input-28-05c9e6076498&gt; in &lt;module&gt; -&gt; 1 cleaner = ImageClassifierCleaner(model) 2 cleaner /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in __init__(self, learn, **kwargs) 79 self.dd_cats = Dropdown(options=vocab) 80 self.dd_ds = Dropdown(options=(&#39;Train&#39;,&#39;Valid&#39;)) &gt; 81 self.iwis = _get_iw_info(learn,0),_get_iw_info(learn,1) 82 self.dd_ds.observe(self.on_change_ds, &#39;value&#39;) 83 self.dd_cats.observe(self.on_change_ds, &#39;value&#39;) /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in _get_iw_info(learn, ds_idx) 66 def _get_iw_info(learn, ds_idx=0): 67 dl = learn.dls[ds_idx].new(shuffle=False, drop_last=False) &gt; 68 inp,probs,targs,preds,losses = learn.get_preds(dl=dl, with_input=True, with_loss=True, with_decoded=True) 69 inp,targs = L(zip(*dl.decode_batch((inp,targs), max_n=9999))) 70 return L([dl.dataset.items,targs,losses]).zip() /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/learner.py in get_preds(self, ds_idx, dl, with_input, with_decoded, with_loss, act, inner, reorder, cbs, **kwargs) 235 if with_loss: ctx_mgrs.append(self.loss_not_reduced()) 236 with ContextManagers(ctx_mgrs): --&gt; 237 self._do_epoch_validate(dl=dl) 238 if act is None: act = getattr(self.loss_func, &#39;activation&#39;, noop) 239 res = cb.all_tensors() /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/learner.py in _do_epoch_validate(self, ds_idx, dl) 185 if dl is None: dl = self.dls[ds_idx] 186 self.dl = dl --&gt; 187 with torch.no_grad(): self._with_events(self.all_batches, &#39;validate&#39;, CancelValidException) 188 189 def _do_epoch(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final) 152 153 def _with_events(self, f, event_type, ex, final=noop): --&gt; 154 try: self(f&#39;before_{event_type}&#39;) ;f() 155 except ex: self(f&#39;after_cancel_{event_type}&#39;) 156 finally: self(f&#39;after_{event_type}&#39;) ;final() /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/learner.py in all_batches(self) 158 def all_batches(self): 159 self.n_iter = len(self.dl) --&gt; 160 for o in enumerate(self.dl): self.one_batch(*o) 161 162 def _do_one_batch(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/load.py in __iter__(self) 99 self.before_iter() 100 self.__idxs=self.get_idxs() # called in context of main process (not workers/subprocesses) --&gt; 101 for b in _loaders[self.fake_l.num_workers==0](self.fake_l): 102 if self.device is not None: b = to_device(b, self.device) 103 yield self.after_batch(b) /opt/conda/envs/fastai/lib/python3.8/site-packages/torch/utils/data/dataloader.py in __next__(self) 433 if self._sampler_iter is None: 434 self._reset() --&gt; 435 data = self._next_data() 436 self._num_yielded += 1 437 if self._dataset_kind == _DatasetKind.Iterable and /opt/conda/envs/fastai/lib/python3.8/site-packages/torch/utils/data/dataloader.py in _next_data(self) 1063 if len(self._task_info[self._rcvd_idx]) == 2: 1064 data = self._task_info.pop(self._rcvd_idx)[1] -&gt; 1065 return self._process_data(data) 1066 1067 assert not self._shutdown and self._tasks_outstanding &gt; 0 /opt/conda/envs/fastai/lib/python3.8/site-packages/torch/utils/data/dataloader.py in _process_data(self, data) 1109 self._try_put_index() 1110 if isinstance(data, ExceptionWrapper): -&gt; 1111 data.reraise() 1112 return data 1113 /opt/conda/envs/fastai/lib/python3.8/site-packages/torch/_utils.py in reraise(self) 426 # have message field 427 raise self.exc_type(message=msg) --&gt; 428 raise self.exc_type(msg) 429 430 FileNotFoundError: Caught FileNotFoundError in DataLoader worker process 4. Original Traceback (most recent call last): File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/torch/utils/data/_utils/worker.py&#34;, line 198, in _worker_loop data = fetcher.fetch(index) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py&#34;, line 34, in fetch data = next(self.dataset_iter) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/load.py&#34;, line 110, in create_batches yield from map(self.do_batch, self.chunkify(res)) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/basics.py&#34;, line 211, in chunked res = list(itertools.islice(it, chunk_sz)) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/load.py&#34;, line 125, in do_item try: return self.after_item(self.create_item(s)) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/load.py&#34;, line 131, in create_item def create_item(self, s): return next(self.it) if s is None else self.dataset[s] File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/core.py&#34;, line 314, in __getitem__ res = tuple([tl[it] for tl in self.tls]) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/core.py&#34;, line 314, in &lt;listcomp&gt; res = tuple([tl[it] for tl in self.tls]) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/core.py&#34;, line 280, in __getitem__ return self._after_item(res) if is_indexer(idx) else res.map(self._after_item) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/data/core.py&#34;, line 242, in _after_item def _after_item(self, o): return self.tfms(o) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/transform.py&#34;, line 198, in __call__ def __call__(self, o): return compose_tfms(o, tfms=self.fs, split_idx=self.split_idx) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/transform.py&#34;, line 150, in compose_tfms x = f(x, **kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/transform.py&#34;, line 73, in __call__ def __call__(self, x, **kwargs): return self._call(&#39;encodes&#39;, x, **kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/transform.py&#34;, line 83, in _call return self._do_call(getattr(self, fn), x, **kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/transform.py&#34;, line 89, in _do_call return retain_type(f(x, **kwargs), x, ret) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/dispatch.py&#34;, line 117, in __call__ return f(*args, **kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/core.py&#34;, line 110, in create return cls(load_image(fn, **merge(cls._open_args, kwargs))) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/core.py&#34;, line 85, in load_image im = Image.open(fn) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py&#34;, line 2891, in open fp = builtins.open(filename, &#34;rb&#34;) FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/art/Raphael/00000102.jpg&#39; . for idx in cleaner.delete(): cleaner.fns[idx].unlink() # for moce to different category # for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . pred,pred_idx,probs = model.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred .",
            "url": "https://jp97.github.io/SW-AI-Blog/jupyter/2021/02/18/Art-Classification.html",
            "relUrl": "/jupyter/2021/02/18/Art-Classification.html",
            "date": " • Feb 18, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Food Classifier",
            "content": "%config IPCompleter.greedy=True . import fastbook fastbook.setup_book() from fastbook import * from fastai.vision.widgets import * . conf_id = &quot;efb1b149-c219-4091-be6d-14a279c405c4&quot; key_id = &quot;1be3ada0f2a649d087e9fb39798485a0&quot; #Define method to search bing for images def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] for img in search_results[&quot;value&quot;][:150]]) . images_url = search_images_bing_new(key_id, &#39;hotdog&#39;, conf_id) print(len(images_url)) . 150 . destination = &#39;image/hotdog.jpg&#39; download_url(images_url[0], destination) im = Image.open(destination) im.to_thumb(128,128) . image_types = &#39;hotdog&#39;, &#39;pizza&#39;, &#39;burger&#39;, &#39;chickennuggets&#39;, &#39;pommes Frittes&#39;, &#39;kebab&#39;, &#39;churros&#39;, &#39;sushi&#39;, &#39;pasta&#39; path = Path(&#39;foods&#39;) if not path.exists(): path.mkdir() for o in image_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing_new(key_id, o, conf_id) download_images(dest, urls=results) . fns = get_image_files(path) failed = verify_images(fns) failed.map(Path.unlink) . (#0) [] . food = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5) ) . dls = food.dataloaders(path) dls.valid.show_batch(max_n=8, nrows=2) . model = cnn_learner(dls, resnet18, metrics=error_rate) model.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.443678 | 0.590293 | 0.197761 | 00:11 | . epoch train_loss valid_loss error_rate time . 0 | 0.716741 | 0.433649 | 0.126866 | 00:13 | . 1 | 0.526972 | 0.360585 | 0.115672 | 00:14 | . 2 | 0.373124 | 0.333442 | 0.119403 | 00:13 | . 3 | 0.285994 | 0.331162 | 0.119403 | 00:14 | . interpreter = ClassificationInterpretation.from_learner(model) interpreter.plot_confusion_matrix() . interpreter.plot_top_losses(1, nrows=1) . cleaner = ImageClassifierCleaner(model) cleaner . for idx in cleaner.delete(): cleaner.fns[idx].unlink() # for moce to different category # for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . model.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = model.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://jp97.github.io/SW-AI-Blog/jupyter/2021/02/17/Food-Classifier.html",
            "relUrl": "/jupyter/2021/02/17/Food-Classifier.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "HOTDOGGER",
            "content": "# Fast book setup import fastbook fastbook.setup_book() from fastbook import * from fastai.vision.widgets import * . conf_id = &quot;efb1b149-c219-4091-be6d-14a279c405c4&quot; key_id = &quot;1be3ada0f2a649d087e9fb39798485a0&quot; #Define method to search bing for images def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] for img in search_results[&quot;value&quot;][:150]]) . ims = search_images_bing_new(key_id, &#39;hot dog&#39;, conf_id) len(ims) . 150 . dest = &#39;images/hot_dog.jpg&#39; download_url(ims[0], dest) im = Image.open(dest) im.to_thumb(128,128) . image_types = &#39;hot dog&#39;, &#39;burger&#39; path = Path(&#39;foods&#39;) if not path.exists(): path.mkdir() for o in image_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing_new(key_id, o, conf_id) download_images(dest, urls=results) fns = get_image_files(path) failed = verify_images(fns) failed.map(Path.unlink) . (#0) [] . food = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=.2, seed = 42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5) ) dls = food.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.226112 | 0.206438 | 0.083333 | 00:03 | . epoch train_loss valid_loss error_rate time . 0 | 0.343744 | 0.164238 | 0.050000 | 00:04 | . 1 | 0.246327 | 0.101516 | 0.066667 | 00:03 | . 2 | 0.167483 | 0.097955 | 0.050000 | 00:03 | . 3 | 0.126819 | 0.106567 | 0.050000 | 00:03 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . for idx in cleaner.delete(): cleaner.fns[idx].unlink() . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . NameError Traceback (most recent call last) &lt;ipython-input-18-9a18687b977c&gt; in &lt;module&gt; -&gt; 1 pred,pred_idx,probs = learn_inf.predict(img) NameError: name &#39;learn_inf&#39; is not defined . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . NameError Traceback (most recent call last) &lt;ipython-input-17-fb9bca207f6f&gt; in &lt;module&gt; 1 lbl_pred = widgets.Label() -&gt; 2 lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; 3 lbl_pred NameError: name &#39;pred&#39; is not defined . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . !pip install voila !jupyter serverextension enable voila --sys-prefix . Collecting voila Downloading voila-0.2.6-py3-none-any.whl (1.9 MB) |████████████████████████████████| 1.9 MB 15.1 MB/s eta 0:00:01 Requirement already satisfied: nbclient&lt;0.6,&gt;=0.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (0.5.1) Collecting nbconvert&lt;7,&gt;=6.0.0 Downloading nbconvert-6.0.7-py3-none-any.whl (552 kB) |████████████████████████████████| 552 kB 48.8 MB/s eta 0:00:01 Collecting jupyter-server&lt;2.0.0,&gt;=0.3.0 Downloading jupyter_server-1.3.0-py3-none-any.whl (188 kB) |████████████████████████████████| 188 kB 51.0 MB/s eta 0:00:01 Requirement already satisfied: jupyter-client&lt;7,&gt;=6.1.3 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (6.1.7) Requirement already satisfied: traitlets&gt;=4.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (5.0.5) Requirement already satisfied: async-generator in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (1.10) Requirement already satisfied: nbformat&gt;=5.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (5.0.8) Requirement already satisfied: nest-asyncio in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (1.4.3) Requirement already satisfied: jupyterlab-pygments in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.1.2) Requirement already satisfied: defusedxml in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.6.0) Requirement already satisfied: testpath in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.4.4) Requirement already satisfied: pygments&gt;=2.4.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.7.2) Requirement already satisfied: bleach in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (3.2.1) Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.8.4) Requirement already satisfied: pandocfilters&gt;=1.4.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.4.2) Requirement already satisfied: jupyter-core in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (4.7.0) Requirement already satisfied: jinja2&gt;=2.4 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.11.2) Requirement already satisfied: entrypoints&gt;=0.2.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.3) Requirement already satisfied: ipython-genutils in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.2.0) Requirement already satisfied: prometheus-client in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.9.0) Requirement already satisfied: pyzmq&gt;=17 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (20.0.0) Requirement already satisfied: Send2Trash in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (1.5.0) Requirement already satisfied: terminado&gt;=0.8.3 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.9.1) Requirement already satisfied: tornado&gt;=6.1.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (6.1) Collecting anyio&gt;=2.0.2 Downloading anyio-2.1.0-py3-none-any.whl (64 kB) |████████████████████████████████| 64 kB 4.1 MB/s eta 0:00:01 Requirement already satisfied: python-dateutil&gt;=2.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-client&lt;7,&gt;=6.1.3-&gt;voila) (2.8.1) Requirement already satisfied: jsonschema!=2.5.0,&gt;=2.4 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (3.2.0) Requirement already satisfied: webencodings in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.5.1) Requirement already satisfied: six&gt;=1.9.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.15.0) Requirement already satisfied: packaging in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (20.4) Requirement already satisfied: MarkupSafe&gt;=0.23 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jinja2&gt;=2.4-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.1.1) Requirement already satisfied: ptyprocess; os_name != &#34;nt&#34; in /opt/conda/envs/fastai/lib/python3.8/site-packages (from terminado&gt;=0.8.3-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.6.0) Requirement already satisfied: idna&gt;=2.8 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from anyio&gt;=2.0.2-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (2.10) Collecting sniffio&gt;=1.1 Downloading sniffio-1.2.0-py3-none-any.whl (10 kB) Requirement already satisfied: setuptools in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (49.6.0.post20201009) Requirement already satisfied: pyrsistent&gt;=0.14.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (0.17.3) Requirement already satisfied: attrs&gt;=17.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (20.3.0) Requirement already satisfied: pyparsing&gt;=2.0.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from packaging-&gt;bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.4.7) Installing collected packages: nbconvert, sniffio, anyio, jupyter-server, voila Attempting uninstall: nbconvert Found existing installation: nbconvert 5.6.1 Uninstalling nbconvert-5.6.1: Successfully uninstalled nbconvert-5.6.1 ERROR: After October 2020 you may experience errors when installing or updating packages. This is because pip will change the way that it resolves dependency conflicts. We recommend you use --use-feature=2020-resolver to test your packages with the new resolver before it becomes the default. nbdev 1.1.5 requires nbconvert&lt;6, but you&#39;ll have nbconvert 6.0.7 which is incompatible. Successfully installed anyio-2.1.0 jupyter-server-1.3.0 nbconvert-6.0.7 sniffio-1.2.0 voila-0.2.6 Enabling: voila - Writing config: /opt/conda/envs/fastai/etc/jupyter - Validating... voila 0.2.6 OK .",
            "url": "https://jp97.github.io/SW-AI-Blog/jupyter/2021/02/16/hotdog-classifier.html",
            "relUrl": "/jupyter/2021/02/16/hotdog-classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jp97.github.io/SW-AI-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jp97.github.io/SW-AI-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jp97.github.io/SW-AI-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jp97.github.io/SW-AI-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}